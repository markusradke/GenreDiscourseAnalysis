---
title: "Data Report - Genre Discourse Analysis"
author: "Markus Radke"
date: "`r Sys.Date()`"
format: 
    html: 
        code-fold: true
        code-summary: "Show/Hide Code"
        output-dir: reports
        toc: true
        toc-location: left
        toc-depth: 5
        toc-expand: 5
        number-sections: true
        theme: cosmo
        code-links:
        - text: Github Repository
          href: "https://github.com/markusradke/GenreDiscourseAnalysis"
        - text: Data preparation script
          icon: file-code
          href: "https://github.com/markusradke/GenreDiscourseAnalysis/blob/main/data-raw/import_and_prepare.R"
        - text: Helper functions
          icon: file-code
          href: "https://github.com/markusradke/GenreDiscourseAnalysis/blob/main/R/prepare_data.R"
---
# Sources
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
devtools::load_all()
settings <- readRDS("../data/settings_data_prep.rds")
```	

```{r load_poptrag}
poptrag <- readRDS("../data/poptrag_selected.rds")
n_poptrag <- nrow(poptrag)
n_offcial_charts <- sum(poptrag$source.officialcharts, na.rm = TRUE)
n_recommendations <- sum(poptrag$source.recommendations, na.rm = TRUE)
n_featured_playlists <- sum(poptrag$source.featuredplaylists, na.rm = TRUE)
n_spotify_charts <- sum(poptrag$source.spotifycharts, na.rm = TRUE)
```

We ground our analysis on a dataset with `r format(n_poptrag, big.mark = ",")` tracks that were popular in Germany within the last 50 years (**PopTraG**).  The tracks were collected from the following sources:

-   **`r format(n_offcial_charts, big.mark = ",")`** tracks from the **weekly [MediaControl](https://www.offiziellecharts.de/) single- and album charts** from 18.11.1977 to 21.11.2024 (scraped and connected to corresponding Spotify ids with a linking success rate of 75% for both distinct tracks in singles charts and distinct albums in album charts).

-   **`r format(n_recommendations, big.mark = ",")`** tracks from **Spotify recommendations** for 126 genre seeds for the German market (retrieved on 29.11.2024, 5 iterations with 50 recommendations per seed, median of 325 recommendations per seed, IQR: 25, max: 343 for "disney", min: 49 for "new release").

-   **`r format(n_featured_playlists, big.mark = ",")`** tracks from 100 **Spotify featured playlists** with median 90 tracks each (IQR: 42, min: 28, max: 750) for the German market (retrieved on 29.11.2024).

- **`r format(n_spotify_charts, big.mark = ",")`** tracks from the **[Daily Top 200 Spotify charts](https://spotifycharts.com/regional/de/weekly/latest)** for Germany from 01.01.2017 to 30.11.2024.

:::{.callout-note}
The dataset excluded songs shorter than 30 seconds (most likely interludes; 853 tracks in the sources). Additionally, only distinct combinations of track titles and principal artist names were permitted, while earlier release dates were preferred.
:::

# Extracting valid genre tags
## MusicBrainz network data

```{r musibrainz_genres}
mb_long <- read_feather_with_lists("../data/filtered_mb_long.feather")
mb_non_music_tags <- readRDS("../data/mb_non_music_tags.rds")

n_mb <- length(unique(mb_long$track.s.id))
n_diff_mb <- n_poptrag - n_mb
n_unique_mb_tags <- unique(mb_long$tag_name) |> length()

tags_per_track_mb <- dplyr::count(mb_long, track.s.id) |> dplyr::pull(n)
votes_per_track_mb <- mb_long |>
  dplyr::group_by(track.s.id) |>
  dplyr::summarize(n_votes = sum(tag_count)) |>
  dplyr::ungroup() |>
  dplyr::pull(n_votes)
tracks_per_tag_mb <- dplyr::count(mb_long, tag_name) |> dplyr::pull(n)
one_track_tags_mb <- dplyr::filter(dplyr::count(mb_long, tag_name), n == 1) |>
  nrow()
artists_per_tag_mb <- mb_long |>
  dplyr::distinct(tag_name, n_artists) |> 
  dplyr::pull(n_artists)

tag_sources <- mb_long |> dplyr::distinct(track.s.id, tag_source) |> dplyr::count(tag_source)
tag_source_lookup <- setNames(tag_sources$n, tag_sources$tag_source)
```

We filtered out all songs without a genre tag and songs with only non-music genre or tags that were not on the [Musicbrainz genre whitelist](https://musicbrainz.org/genres) on June 16, 2025. Additionally, we excluded tags that did not occur with at least `r settings$n_artists_threshold` artists, as these do not classify for a genre (as no community can be assumed for these tags). This way we removed `r format(n_diff_mb, big.mark = ",")` tracks from the data set (`r round(n_diff_mb / n_poptrag * 100)`%). Non-music genre tags were: `r paste(sprintf('"%s"', mb_non_music_tags), collapse = ", ")`.

This amounts to **N~MusicBrainz~ = `r format(n_mb, big.mark = ",")` tracks** with MusicBrainz music genre tags.

There are **`r format(n_unique_mb_tags, big.mark = ",")` different genre tags** in the MusicBrainz genre data set.


If we could not find tags assinged directly to the individual track, we used the tags assinged to the corresponding release. If there were no release tags, we used the artist tags. For `r format(tag_source_lookup["track"], big.mark = ",")` tracks (`r round(tag_source_lookup["track"] / n_mb *100)`%) tracks the tagging originated from track taggings, for `r format(tag_source_lookup["album"], big.mark = ",")` tracks (`r round(tag_source_lookup["album"] / n_mb * 100)`%) from release taggings, and for `r format(tag_source_lookup["artist"], big.mark = ",")` tracks (`r round(tag_source_lookup["artist"] / n_mb * 100)`%) from artist taggings.

Users assigned between `r min(tags_per_track_mb)` and `r max(tags_per_track_mb)` different tags to each track (median: `r median(tags_per_track_mb)`, IQR: `r IQR(tags_per_track_mb)`) and voted for each track between `r min(votes_per_track_mb)` and `r max(votes_per_track_mb)` times (median: `r median(votes_per_track_mb)`, IQR: `r IQR(votes_per_track_mb)`).

Track-based statistics on tag assignement: 

* min `r min(tracks_per_tag_mb)` tracks per tag
* max `r format(max(tracks_per_tag_mb), big.mark = ",")` tracks per tag
* median `r median(tracks_per_tag_mb)` tracks per tag
* IQR `r IQR(tracks_per_tag_mb)` tracks per tag

Artist-based statistics on tag assignement:

* min `r min(artists_per_tag_mb)` artists per tag
* max `r format(max(artists_per_tag_mb), big.mark = ",")` artists per tag
* median `r median(artists_per_tag_mb)` artists per tag
* IQR `r IQR(artists_per_tag_mb)` artists per tag


## Spotify network data

```{r spotify_genres}
s_long <- read_feather_with_lists("../data/filtered_s_long.feather")
s_non_music_tags <- readRDS("../data/s_non_music_tags.rds")

n_s <- length(unique(s_long$track.s.id))
n_diff_s <- n_poptrag - n_s
n_unique_s_tags <- unique(s_long$tag_name) |> length()

tags_per_track_s <- dplyr::count(s_long, track.s.id) |> dplyr::pull(n)
tracks_per_tag_s <- dplyr::count(s_long, tag_name) |> dplyr::pull(n)
one_track_tags_s <- dplyr::filter(dplyr::count(s_long, tag_name), n == 1) |>
  nrow()

n_multiple_artists <- poptrag |>
  dplyr::filter(track.s.id %in% s_long$track.s.id) |>
  dplyr::filter(n_trackartists > 1) |>
  nrow() 
artists_per_tag_s <- s_long |>
  dplyr::distinct(tag_name, n_artists) |> 
  dplyr::pull(n_artists)
```

We filtered out all songs without a Spotify genre tag (Spotify artist genre tags) or with only non-music genre tags. Additionally, we excluded tags that did not occur with at least `r settings$n_artists_threshold` artists, as these do not classify for a genre (as no community can be assumed for these tags). This way we removed `r format(n_diff_s, big.mark = ",")` tracks from the data set (`r round(n_diff_s / n_poptrag * 100)`%).Non-music genre tags were: `r paste(sprintf('"%s"', s_non_music_tags), collapse = ", ")`.

This amounts to **N~Spotify~ = `r format(n_s, big.mark = ",")` tracks** with Spotify music genre tags.

There are **`r format(n_unique_s_tags, big.mark = ",")` different genre tags** in the Spotify genre data set. Users assigned between `r min(tags_per_track_s)` and `r max(tags_per_track_s)` different tags to each track (median: `r median(tags_per_track_s)`, IQR: `r IQR(tags_per_track_s)`).

Track-based statistics on tag assignement:  

* min `r min(tracks_per_tag_s)` tracks per tag
* max `r format(max(tracks_per_tag_s), big.mark = ",")` tracks per tag
* median `r median(tracks_per_tag_s)` tracks per tag
* IQR `r IQR(tracks_per_tag_s)` tracks per tag

Artist-based statistics on tag assignement:

* min `r min(artists_per_tag_s)` artists per tag
* max `r format(max(artists_per_tag_s), big.mark = ",")` artists per tag
* median `r median(artists_per_tag_s)` artists per tag
* IQR `r IQR(artists_per_tag_s)` artists per tag

:::{.callout-important}
Spotify genre tags are **assigned to artists, not to tracks**. Therefore, all tracks by the same artist have the same Spotify genre tags.
::::
:::{.callout-note}
In addition to artists being the observational unit, Spotify provides no vote counts for tags on track basis. However, some track feature multiple artists. Thus, we calculated the vote for each track's tags by combining all track artists' tags and counting the number of tag appearences per track. `r format(n_multiple_artists, big.mark = ",")` tracks (`r round(n_multiple_artists / n_s* 100)`%) featured multiple artists.
:::
