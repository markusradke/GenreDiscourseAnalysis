---
title: "Genre Trees - Genre Discourse Analysis"
author: "Markus Radke"
date: "`r Sys.Date()`"
format: 
    html: 
        code-fold: true
        code-summary: "Show/Hide Code"
        output-dir: reports
        toc: true
        toc-location: left
        toc-depth: 5
        toc-expand: 5
        number-sections: true
        theme: cosmo
        code-links:
        - text: Github Repository
          href: "https://github.com/markusradke/GenreDiscourseAnalysis"
        - text: Corresponding Analysis script
          icon: file-code
          href: "https://github.com/markusradke/GenreDiscourseAnalysis/blob/main/analysis/01_build_genre_trees.R"
        - text: Helper functions - Tree Building
          icon: file-code
          href: "https://github.com/markusradke/GenreDiscourseAnalysis/blob/main/R/build_genre_tree.R"
        - text: Helper functions - Initial Genre Mapping
          icon: file-code
          href: "https://github.com/markusradke/GenreDiscourseAnalysis/blob/main/R/map_genres.R"
        - text: Helper functions - Tree Plotting
          icon: file-code
          href: "https://github.com/markusradke/GenreDiscourseAnalysis/blob/main/R/make_network_graph.R"
        css: 
          styles.css
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
devtools::load_all()
```	

# Short Explanation
This report presents interactive genre trees for the MusicBrainz and Discogs folksonomies, as well as the digital music streaming platform Spotify. Each tree visualizes the **hierarchical structure of music genres** based on a dataset of popular tracks in Germany over the last 50 years (PopTraG). The trees allow users to explore sub-genres by clicking on nodes, with node size representing the number of tracks associated with each genre. 

## The intital genre network
In the initial genre network, **each node represents a genre tag** on the corresponding platform. The **edges of this initial network are based on the co-occurrence** of genre tags across all tracks in the PopTraG dataset (i.e., the probability that a certain genre tag appears, given that another genre tag was assigned to a track; see example with "pop" and "hip hop" below). The more frequently two genres co-occur, the stronger the connection (edge) between them. Musicbrainz provides additional community votes for genre assignments, which are used to **weight the edges in the MusicBrainz genre network**. Here, we multiplied the link strengh by the mean relative vote for a genre across all tracks where both genres appear.

```{mermaid}
---
title: "Example for Discogs and Spotify"
---
flowchart LR
rock -- P(metal|rock) --> metal
metal -- P(rock|metal) --> rock
```

```{mermaid}
---
title: "Example for MusicBrainz"
---
flowchart LR
rock -- P(metal|rock) * meanRelFreqVotes(metal|rock) --> metal
metal -- P(rock|metal) * meanRelFreqVotes(rock|metal) --> rock
```

## Network of descendant genres
Next, we determine which genre is a descendant of the other. Genres with descendants should be distributed more evenly across multiple genres. Thus, in our initial genre network, we eliminate the weaker connection between the two genres. To account for the uncertainty in this decision, we subtract the weaker conditional probability from the conditional probability of the stronger connection (see the continued example).  

```{mermaid}
flowchart LR
rock -. P(metal|rock) .-x metal
metal -- P(rock|metal) - P(rock|metal) --> rock
```

## 'Radically democratic' genre trees
Now, we transform the directed network of descendant genres into a hierarchical tree. We assume that the strongest link to a potential parent genre determines the most suitable parent genre. Thus, we eliminate all other outgoing links to potential parents (see the continued example).

```{mermaid}
flowchart LR
metal --> rock
metal -.-x pop
```
# Genre Tree for MusicBrainz

:::{.column-screen-inset-right}
:::{.plot-container}
**Navigation:** Click and drag to pan • Mouse wheel to zoom in/out • Click "Center Root" to reset view • Click blue nodes to expand/collapse
```{r musicbrainz-interactive-tree, echo=FALSE}
mb_initial <- read_feather_with_lists("../models/trees/initial_genres_mb.feather")
mb_graph <- readRDS("../models/trees/MusicBrainz_graph.rds")

plot_network_graph(
  mb_graph,
  mb_initial,
  height = 1200,
  interactive = TRUE,
  min_font_size = 12,
  max_font_size = 12,  # Fixed font size as requested
  sizemode = "initial_genre",
  sortmode = "size",
  fillmode = "none"
)
```
:::
:::

# Genre Tree for Discogs
:::{.column-screen-inset-right}
:::{.plot-container}
**Navigation:** Click and drag to pan • Mouse wheel to zoom in/out • Click "Center Root" to reset view • Click blue nodes to expand/collapse
```{r discogs-interactive-tree, echo=FALSE}
dc_initial <- read_feather_with_lists("../models/trees/initial_genres_dc.feather")
dc_graph <- readRDS("../models/trees/Discogs_graph.rds")

plot_network_graph(
  dc_graph,
  dc_initial,
  height = 1200,
  interactive = TRUE,
  min_font_size = 12,
  max_font_size = 12,  # Fixed font size as requested
  sizemode = "initial_genre",
  sortmode = "size",
  fillmode = "none"
)
```
:::
:::

# Genre Tree for Spotify
Please click on the nodes to explore sub-genres. The font size is fixed to ensure readability. Node size represents the number of songs in each genre.

:::{.column-screen-inset-right}
:::{.plot-container}
**Navigation:** Click and drag to pan • Mouse wheel to zoom in/out • Click "Center Root" to reset view • Click blue nodes to expand/collapse
```{r spotify-interactive-tree, echo=FALSE}	
s_initial <- read_feather_with_lists("../models/trees/initial_genres_s.feather")
s_graph <- readRDS("../models/trees/Spotify_graph.rds")

plot_network_graph(
  s_graph,
  s_initial,
  height = 1200,
  interactive = TRUE,
  min_font_size = 12,
  max_font_size = 12,  # Fixed font size as requested
  sizemode = "initial_genre",
  sortmode = "size",
  fillmode = "none"
)
```
:::

:::