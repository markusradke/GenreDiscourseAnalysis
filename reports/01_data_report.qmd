---
title: "Data Report - Genre Discourse Analysis"
author: "Markus Radke"
date: "`r Sys.Date()`"
format: 
    html: 
        code-fold: true
        code-summary: "Show/Hide Code"
        output-dir: reports
        toc: true
        toc-location: left
        toc-depth: 2
        number-sections: true
        theme: cosmo
        code-links:
        - text: Github Repository
          href: "https://github.com/markusradke/GenreDiscourseAnalysis"
---
## Sources

```{r load_poptrag}
poptrag <- readRDS('../data/poptrag_selected.rds')
n_poptrag <- nrow(poptrag)
n_offcial_charts <- sum(poptrag$source.officialcharts, na.rm = TRUE)
n_recommendations <- sum(poptrag$source.recommendations, na.rm = TRUE)
n_featured_playlists <- sum(poptrag$source.featuredplaylists,na.rm = TRUE)
n_spotify_charts <- sum(poptrag$source.spotifycharts, na.rm = TRUE)
n_only_spotify_charts <- poptrag |>
  dplyr::filter(
    source.spotifycharts &
      !source.officialcharts &
      !source.recommendations &
      !source.featuredplaylists
  ) |>
  nrow()
```

We ground our analysis on a dataset with `r format(n_poptrag, big.mark = ',')` tracks that were popular in Germany within the last 50 years (**PopTraG**).  The tracks were collected from the following sources:

-   **`r format(n_offcial_charts, big.mark = ',')`** tracks from the **weekly [MediaControl](https://www.offiziellecharts.de/) single- and album charts** from 18.11.1977 to 21.11.2024 (scraped and connected to corresponding Spotify ids with a linking success rate of 75% for both distinct tracks in singles charts and distinct albums in album charts).

-   **`r format(n_recommendations, big.mark = ',')`** tracks from **Spotify recommendations** for 126 genre seeds for the German market (retrieved on 29.11.2024, 5 iterations with 50 recommendations per seed, median of 325 recommendations per seed, IQR: 25, max: 343 for "disney", min: 49 for "new release").

-   **`r format(n_featured_playlists, big.mark = ',')`** tracks from 100 **Spotify featured playlists** with median 90 tracks each (IQR: 42, min: 28, max: 750) for the German market (retrieved on 29.11.2024).

- **`r format(n_spotify_charts, big.mark = ',')`** tracks from the **[Daily Top 200 Spotify charts](https://spotifycharts.com/regional/de/weekly/latest)** for Germany from 01.01.2017 to 30.11.2024.

`r format(n_only_spotify_charts, big.mark = ',')` tracks that were **only in the Spotify charts** and not in any other source were **excluded** from the analysis.

:::{.callout-note}
The dataset excluded songs shorter than 30 seconds (most likely interludes; 994 tracks in the sources). Additionally, only distinct combinations of track titles and principal artist names were permitted, while earlier release dates were preferred.
:::

## Preparation
### MusicBrainz network data

```{r musibrainz_genres}
get_unique_tags_from_taglist <- function(tags) {
  do.call(rbind, lapply(tags, function(frame) frame['tag_name'])) |> 
    dplyr::pull(tag_name) |> 
    unique()
}

poptrag_filtered_mb_genres <- readRDS('../data/filtered_mb.rds')
mb_long <- readRDS('../data/filtered_mb_long.rds')
mb_non_music_tags <- readRDS('../data/mb_non_music_tags.rds')

n_diff_mb <- n_poptrag - nrow(poptrag_filtered_mb_genres)
n_unique_mb_tags <- get_unique_tags_from_taglist(mb_long$mb.genres) |> length()

tags_per_track_mb <- dplyr::count(mb_long, track.s.id) |> dplyr::pull(n)
votes_per_track_mb <- mb_long |> 
  dplyr::group_by(track.s.id) |> 
  dplyr::summarize(n_votes = sum(tag_count)) |> 
  dplyr::ungroup() |> 
  dplyr::pull(n_votes)
```

We filtered out all songs without a genre tag or with only non-music genre tags on MusicBrainz (`r format(n_diff_mb, big.mark = ',')` tracks, `r round(n_diff_mb / n_poptrag, 1)`%). Non-music genre tags were: `r paste(sprintf('"%s"', mb_non_music_tags), collapse = ', ')`.

This amounts to **N~MusicBrainz~ = `r format(nrow(poptrag_filtered_mb_genres), big.mark = ',')` tracks** with MusicBrainz music genre tags.

There are `r format(n_unique_mb_tags, big.mark = ',')` different genre tags in the MusicBrainz genre data set. Users assigned between `r min(tags_per_track_mb)` and `r max(tags_per_track_mb)` different tags to each track (median: `r median(tags_per_track_mb)`, IQR: `r IQR(tags_per_track_mb)`) and voted for each track between `r min(votes_per_track_mb)` and `r max(votes_per_track_mb)` times (median: `r median(votes_per_track_mb)`, IQR: `r IQR(votes_per_track_mb)`).

### Discogs network data

```{r discogs_genres}
poptrag_filtered_dc_genres <- readRDS('../data/filtered_dc.rds')
dc_long <- readRDS('../data/filtered_dc_long.rds')
dc_non_music_tags <- readRDS('../data/dc_non_music_tags.rds')

n_diff_dc <- n_poptrag - nrow(poptrag_filtered_dc_genres)
n_unique_dc_tags <- get_unique_tags_from_taglist(dc_long$dc.genres) |> length()

tags_per_track_dc <- dplyr::count(dc_long, track.s.id) |> dplyr::pull(n)
```

We filtered out all songs without a Discogs genre tag (Discogs "genre" and/or "style") or with only non-music genre tags (`r format(n_diff_dc, big.mark = ',')` tracks, `r round(n_diff_dc / n_poptrag, 1)`%). Non-music genre tags were: `r paste(sprintf('"%s"', dc_non_music_tags), collapse = ', ')`.

This amounts to **N~Discogs~ = `r format(nrow(poptrag_filtered_dc_genres), big.mark = ',')` tracks** with Discogs music genre tags.

There are `r format(n_unique_dc_tags, big.mark = ',')` different genre tags in the Discogs genre data set. Users assigned between `r min(tags_per_track_dc)` and `r max(tags_per_track_dc)` different tags to each track (median: `r median(tags_per_track_dc)`, IQR: `r IQR(tags_per_track_dc)`).

:::{.callout-note}
All votes for tags per track were set to 1 for the Discgos data set, as Discogs does not provide the number of votes per tag.
:::
